using System.Collections.Generic;

public static class Constants {
    // Min-max roll value for lv85 gears
    public static readonly Dictionary<StatType, (decimal Min, decimal Max)> StatType2MinMax =
        new Dictionary<StatType, (decimal, decimal)>() {
            { StatType.Attack, (33, 46) },
            { StatType.AttackPercent, (0.04m, 0.08m) },
            { StatType.Defense, (28, 35) },
            { StatType.DefensePercent, (0.04m, 0.08m) },
            { StatType.Health, (157, 202) },
            { StatType.HealthPercent, (0.04m, 0.08m) },
            { StatType.Speed, (2, 5) },
            { StatType.EffectivenessPercent, (0.04m, 0.08m) },
            { StatType.EffectResistancePercent, (0.04m, 0.08m) },
            { StatType.CriticalHitChancePercent, (0.03m, 0.05m) },
            { StatType.CriticalHitDamagePercent, (0.04m, 0.07m) },
        };
    // Modded value (based on roll count) for lv85 gears
    public static readonly Dictionary<(StatType StatType, int RollCount), decimal> StatType2ModValue =
        new Dictionary<(StatType, int), decimal>() {
            { (StatType.Attack, 0), 47 },
            { (StatType.Attack, 1), 77 },
            { (StatType.Attack, 2), 101 },
            { (StatType.Attack, 3), 109 },
            { (StatType.Attack, 4), 129 },
            { (StatType.Attack, 5), 151 },
            { (StatType.AttackPercent, 0), 0.08m },
            { (StatType.AttackPercent, 1), 0.11m },
            { (StatType.AttackPercent, 2), 0.14m },
            { (StatType.AttackPercent, 3), 0.17m },
            { (StatType.AttackPercent, 4), 0.18m },
            { (StatType.AttackPercent, 5), 0.19m },
            { (StatType.Defense, 0), 35 },
            { (StatType.Defense, 1), 61 },
            { (StatType.Defense, 2), 76 },
            { (StatType.Defense, 3), 80 },
            { (StatType.Defense, 4), 97 },
            { (StatType.Defense, 5), 111 },
            { (StatType.DefensePercent, 0), 0.08m },
            { (StatType.DefensePercent, 1), 0.11m },
            { (StatType.DefensePercent, 2), 0.14m },
            { (StatType.DefensePercent, 3), 0.17m },
            { (StatType.DefensePercent, 4), 0.18m },
            { (StatType.DefensePercent, 5), 0.19m },
            { (StatType.Health, 0), 203 },
            { (StatType.Health, 1), 336 },
            { (StatType.Health, 2), 422 },
            { (StatType.Health, 3), 461 },
            { (StatType.Health, 4), 578 },
            { (StatType.Health, 5), 659 },
            { (StatType.HealthPercent, 0), 0.08m },
            { (StatType.HealthPercent, 1), 0.11m },
            { (StatType.HealthPercent, 2), 0.14m },
            { (StatType.HealthPercent, 3), 0.17m },
            { (StatType.HealthPercent, 4), 0.18m },
            { (StatType.HealthPercent, 5), 0.19m },
            { (StatType.Speed, 0), 4 },
            { (StatType.Speed, 1), 5 },
            { (StatType.Speed, 2), 6 },
            { (StatType.Speed, 3), 8 },
            { (StatType.Speed, 4), 9 },
            { (StatType.Speed, 5), 10 },
            { (StatType.EffectivenessPercent, 0), 0.08m },
            { (StatType.EffectivenessPercent, 1), 0.11m },
            { (StatType.EffectivenessPercent, 2), 0.14m },
            { (StatType.EffectivenessPercent, 3), 0.17m },
            { (StatType.EffectivenessPercent, 4), 0.18m },
            { (StatType.EffectivenessPercent, 5), 0.19m },
            { (StatType.EffectResistancePercent, 0), 0.08m },
            { (StatType.EffectResistancePercent, 1), 0.11m },
            { (StatType.EffectResistancePercent, 2), 0.14m },
            { (StatType.EffectResistancePercent, 3), 0.17m },
            { (StatType.EffectResistancePercent, 4), 0.18m },
            { (StatType.EffectResistancePercent, 5), 0.19m },
            { (StatType.CriticalHitChancePercent, 0), 0.04m },
            { (StatType.CriticalHitChancePercent, 1), 0.06m },
            { (StatType.CriticalHitChancePercent, 2), 0.08m },
            { (StatType.CriticalHitChancePercent, 3), 0.10m },
            { (StatType.CriticalHitChancePercent, 4), 0.11m },
            { (StatType.CriticalHitChancePercent, 5), 0.12m },
            { (StatType.CriticalHitDamagePercent, 0), 0.07m },
            { (StatType.CriticalHitDamagePercent, 1), 0.09m },
            { (StatType.CriticalHitDamagePercent, 2), 0.12m },
            { (StatType.CriticalHitDamagePercent, 3), 0.15m },
            { (StatType.CriticalHitDamagePercent, 4), 0.16m },
            { (StatType.CriticalHitDamagePercent, 5), 0.17m },
        };
    // Modded and reforged value (based on roll count) for lv85 gears
    public static readonly Dictionary<(StatType StatType, int RollCount), decimal> StatType2ModReforgedValue =
        new Dictionary<(StatType, int), decimal>() {
            { (StatType.Attack, 0), 58 },
            { (StatType.Attack, 1), 99 },
            { (StatType.Attack, 2), 134 },
            { (StatType.Attack, 3), 153 },
            { (StatType.Attack, 4), 184 },
            { (StatType.Attack, 5), 217 },
            { (StatType.AttackPercent, 0), 0.09m },
            { (StatType.AttackPercent, 1), 0.14m },
            { (StatType.AttackPercent, 2), 0.18m },
            { (StatType.AttackPercent, 3), 0.22m },
            { (StatType.AttackPercent, 4), 0.25m },
            { (StatType.AttackPercent, 5), 0.27m },
            { (StatType.Defense, 0), 44 },
            { (StatType.Defense, 1), 79 },
            { (StatType.Defense, 2), 103 },
            { (StatType.Defense, 3), 116 },
            { (StatType.Defense, 4), 142 },
            { (StatType.Defense, 5), 165 },
            { (StatType.DefensePercent, 0), 0.09m },
            { (StatType.DefensePercent, 1), 0.14m },
            { (StatType.DefensePercent, 2), 0.18m },
            { (StatType.DefensePercent, 3), 0.22m },
            { (StatType.DefensePercent, 4), 0.25m },
            { (StatType.DefensePercent, 5), 0.27m },
            { (StatType.Health, 0), 259 },
            { (StatType.Health, 1), 448 },
            { (StatType.Health, 2), 590 },
            { (StatType.Health, 3), 685 },
            { (StatType.Health, 4), 858 },
            { (StatType.Health, 5), 995 },
            { (StatType.HealthPercent, 0), 0.09m },
            { (StatType.HealthPercent, 1), 0.14m },
            { (StatType.HealthPercent, 2), 0.18m },
            { (StatType.HealthPercent, 3), 0.22m },
            { (StatType.HealthPercent, 4), 0.25m },
            { (StatType.HealthPercent, 5), 0.27m },
            { (StatType.Speed, 0), 4 },
            { (StatType.Speed, 1), 6 },
            { (StatType.Speed, 2), 8 },
            { (StatType.Speed, 3), 11 },
            { (StatType.Speed, 4), 13 },
            { (StatType.Speed, 5), 14 },
            { (StatType.EffectivenessPercent, 0), 0.09m },
            { (StatType.EffectivenessPercent, 1), 0.14m },
            { (StatType.EffectivenessPercent, 2), 0.18m },
            { (StatType.EffectivenessPercent, 3), 0.22m },
            { (StatType.EffectivenessPercent, 4), 0.25m },
            { (StatType.EffectivenessPercent, 5), 0.27m },
            { (StatType.EffectResistancePercent, 0), 0.09m },
            { (StatType.EffectResistancePercent, 1), 0.14m },
            { (StatType.EffectResistancePercent, 2), 0.18m },
            { (StatType.EffectResistancePercent, 3), 0.22m },
            { (StatType.EffectResistancePercent, 4), 0.25m },
            { (StatType.EffectResistancePercent, 5), 0.27m },
            { (StatType.CriticalHitChancePercent, 0), 0.05m },
            { (StatType.CriticalHitChancePercent, 1), 0.08m },
            { (StatType.CriticalHitChancePercent, 2), 0.11m },
            { (StatType.CriticalHitChancePercent, 3), 0.14m },
            { (StatType.CriticalHitChancePercent, 4), 0.16m },
            { (StatType.CriticalHitChancePercent, 5), 0.18m },
            { (StatType.CriticalHitDamagePercent, 0), 0.08m },
            { (StatType.CriticalHitDamagePercent, 1), 0.11m },
            { (StatType.CriticalHitDamagePercent, 2), 0.15m },
            { (StatType.CriticalHitDamagePercent, 3), 0.19m },
            { (StatType.CriticalHitDamagePercent, 4), 0.22m },
            { (StatType.CriticalHitDamagePercent, 5), 0.24m },
        };
    // Based on https://github.com/fribbels/Fribbels-Epic-7-Optimizer?tab=readme-ov-file#gear-score
    public static readonly Dictionary<StatType, decimal> StatType2GearScoreMultiplier =
        new Dictionary<StatType, decimal>() {
            { StatType.Attack, 3.46m/39 },
            { StatType.AttackPercent, 8m/8 * 100 },
            { StatType.Defense,4.99m/31 },
            { StatType.DefensePercent, 8m/8 * 100 },
            { StatType.Health, 3.09m/174 },
            { StatType.HealthPercent, 8m/8 * 100 },
            { StatType.Speed, 8m/4 },
            { StatType.EffectivenessPercent, 8m/8 * 100 },
            { StatType.EffectResistancePercent, 8m/8 * 100 },
            { StatType.CriticalHitChancePercent, 8m/5 * 100 },
            { StatType.CriticalHitDamagePercent, 8m/7 * 100 }
        };
    public static readonly Dictionary<(StatType, decimal), int> StatTypeValue2EquipmentRank =
        new Dictionary<(StatType, decimal), int>() {
            { (StatType.Attack, 100), 0 },
            { (StatType.Attack, 120), 1 },
            { (StatType.Attack, 140), 2 },
            { (StatType.Attack, 160), 3 },
            { (StatType.Attack, 180), 4 },
            { (StatType.Attack, 200), 5 },
            { (StatType.Attack, 220), 6 },
            { (StatType.Attack, 240), 7 },
            { (StatType.Attack, 260), 8 },
            { (StatType.Attack, 280), 9 },
            { (StatType.Attack, 300), 10 },
            { (StatType.Attack, 330), 11 },
            { (StatType.Attack, 360), 12 },
            { (StatType.Attack, 390), 13 },
            { (StatType.Attack, 420), 14 },
            { (StatType.Attack, 500), 15 },
            { (StatType.Attack, 525), 15 }, // Reforged
            { (StatType.Attack, 515), 15 }, // 88
            { (StatType.AttackPercent, 0.12m), 0 },
            { (StatType.AttackPercent, 0.14m), 1 },
            { (StatType.AttackPercent, 0.17m), 2 },
            { (StatType.AttackPercent, 0.19m), 3 },
            { (StatType.AttackPercent, 0.22m), 4 },
            { (StatType.AttackPercent, 0.24m), 5 },
            { (StatType.AttackPercent, 0.26m), 6 },
            { (StatType.AttackPercent, 0.29m), 7 },
            { (StatType.AttackPercent, 0.31m), 8 },
            { (StatType.AttackPercent, 0.34m), 9 },
            { (StatType.AttackPercent, 0.36m), 10 },
            { (StatType.AttackPercent, 0.4m), 11 },
            { (StatType.AttackPercent, 0.43m), 12 },
            { (StatType.AttackPercent, 0.47m), 13 },
            { (StatType.AttackPercent, 0.5m), 14 },
            { (StatType.AttackPercent, 0.6m), 15 },
            { (StatType.AttackPercent, 0.65m), 15 }, // Reforged
            { (StatType.Defense, 60), 0 },
            { (StatType.Defense, 72), 1 },
            { (StatType.Defense, 84), 2 },
            { (StatType.Defense, 93), 3 },
            { (StatType.Defense, 108), 4 },
            { (StatType.Defense, 120), 5 },
            { (StatType.Defense, 132), 6 },
            { (StatType.Defense, 144), 7 },
            { (StatType.Defense, 156), 8 },
            { (StatType.Defense, 168), 9 },
            { (StatType.Defense, 180), 10 },
            { (StatType.Defense, 198), 11 },
            { (StatType.Defense, 216), 12 },
            { (StatType.Defense, 234), 13 },
            { (StatType.Defense, 252), 14 },
            { (StatType.Defense, 300), 15 },
            { (StatType.Defense, 310), 15 }, // Reforged, 88
            { (StatType.DefensePercent, 0.12m), 0 },
            { (StatType.DefensePercent, 0.14m), 1 },
            { (StatType.DefensePercent, 0.17m), 2 },
            { (StatType.DefensePercent, 0.19m), 3 },
            { (StatType.DefensePercent, 0.22m), 4 },
            { (StatType.DefensePercent, 0.24m), 5 },
            { (StatType.DefensePercent, 0.26m), 6 },
            { (StatType.DefensePercent, 0.29m), 7 },
            { (StatType.DefensePercent, 0.31m), 8 },
            { (StatType.DefensePercent, 0.34m), 9 },
            { (StatType.DefensePercent, 0.36m), 10 },
            { (StatType.DefensePercent, 0.4m), 11 },
            { (StatType.DefensePercent, 0.43m), 12 },
            { (StatType.DefensePercent, 0.47m), 13 },
            { (StatType.DefensePercent, 0.5m), 14 },
            { (StatType.DefensePercent, 0.6m), 15 },
            { (StatType.DefensePercent, 0.65m), 15 }, // Reforged, 88
            { (StatType.Health, 540), 0 },
            { (StatType.Health, 648), 1 },
            { (StatType.Health, 756), 2 },
            { (StatType.Health, 864), 3 },
            { (StatType.Health, 972), 4 },
            { (StatType.Health, 1080), 5 },
            { (StatType.Health, 1188), 6 },
            { (StatType.Health, 1296), 7 },
            { (StatType.Health, 1404), 8 },
            { (StatType.Health, 1512), 9 },
            { (StatType.Health, 1620), 10 },
            { (StatType.Health, 1782), 11 },
            { (StatType.Health, 1944), 12 },
            { (StatType.Health, 2106), 13 },
            { (StatType.Health, 2268), 14 },
            { (StatType.Health, 2700), 15 },
            { (StatType.Health, 2835), 15 }, // Reforged
            { (StatType.Health, 2765), 15 }, // 88
            { (StatType.HealthPercent, 0.12m), 0 },
            { (StatType.HealthPercent, 0.14m), 1 },
            { (StatType.HealthPercent, 0.17m), 2 },
            { (StatType.HealthPercent, 0.19m), 3 },
            { (StatType.HealthPercent, 0.22m), 4 },
            { (StatType.HealthPercent, 0.24m), 5 },
            { (StatType.HealthPercent, 0.26m), 6 },
            { (StatType.HealthPercent, 0.29m), 7 },
            { (StatType.HealthPercent, 0.31m), 8 },
            { (StatType.HealthPercent, 0.34m), 9 },
            { (StatType.HealthPercent, 0.36m), 10 },
            { (StatType.HealthPercent, 0.4m), 11 },
            { (StatType.HealthPercent, 0.43m), 12 },
            { (StatType.HealthPercent, 0.47m), 13 },
            { (StatType.HealthPercent, 0.5m), 14 },
            { (StatType.HealthPercent, 0.6m), 15 },
            { (StatType.HealthPercent, 0.65m), 15 }, // Reforged, 88
            { (StatType.Speed, 8), 0 },
            { (StatType.Speed, 9), 1 },
            { (StatType.Speed, 11), 2 },
            { (StatType.Speed, 12), 3 },
            { (StatType.Speed, 14), 4 },
            { (StatType.Speed, 16), 5 },
            { (StatType.Speed, 17), 6 },
            { (StatType.Speed, 19), 7 },
            { (StatType.Speed, 20), 8 },
            { (StatType.Speed, 22), 9 },
            { (StatType.Speed, 24), 10 },
            { (StatType.Speed, 26), 11 },
            { (StatType.Speed, 28), 12 },
            { (StatType.Speed, 31), 13 },
            { (StatType.Speed, 33), 14 },
            { (StatType.Speed, 40), 15 },
            { (StatType.Speed, 45), 15 }, // Reforged, 88
            { (StatType.EffectivenessPercent, 0.12m), 0 },
            { (StatType.EffectivenessPercent, 0.14m), 1 },
            { (StatType.EffectivenessPercent, 0.17m), 2 },
            { (StatType.EffectivenessPercent, 0.19m), 3 },
            { (StatType.EffectivenessPercent, 0.22m), 4 },
            { (StatType.EffectivenessPercent, 0.24m), 5 },
            { (StatType.EffectivenessPercent, 0.26m), 6 },
            { (StatType.EffectivenessPercent, 0.29m), 7 },
            { (StatType.EffectivenessPercent, 0.31m), 8 },
            { (StatType.EffectivenessPercent, 0.34m), 9 },
            { (StatType.EffectivenessPercent, 0.36m), 10 },
            { (StatType.EffectivenessPercent, 0.4m), 11 },
            { (StatType.EffectivenessPercent, 0.43m), 12 },
            { (StatType.EffectivenessPercent, 0.47m), 13 },
            { (StatType.EffectivenessPercent, 0.5m), 14 },
            { (StatType.EffectivenessPercent, 0.6m), 15 },
            { (StatType.EffectivenessPercent, 0.65m), 15 }, // Reforged, 88
            { (StatType.EffectResistancePercent, 0.12m), 0 },
            { (StatType.EffectResistancePercent, 0.14m), 1 },
            { (StatType.EffectResistancePercent, 0.17m), 2 },
            { (StatType.EffectResistancePercent, 0.19m), 3 },
            { (StatType.EffectResistancePercent, 0.22m), 4 },
            { (StatType.EffectResistancePercent, 0.24m), 5 },
            { (StatType.EffectResistancePercent, 0.26m), 6 },
            { (StatType.EffectResistancePercent, 0.29m), 7 },
            { (StatType.EffectResistancePercent, 0.31m), 8 },
            { (StatType.EffectResistancePercent, 0.34m), 9 },
            { (StatType.EffectResistancePercent, 0.36m), 10 },
            { (StatType.EffectResistancePercent, 0.4m), 11 },
            { (StatType.EffectResistancePercent, 0.43m), 12 },
            { (StatType.EffectResistancePercent, 0.47m), 13 },
            { (StatType.EffectResistancePercent, 0.5m), 14 },
            { (StatType.EffectResistancePercent, 0.6m), 15 },
            { (StatType.EffectResistancePercent, 0.65m), 15 }, // Reforged, 88
            { (StatType.CriticalHitChancePercent, 0.11m), 0 },
            { (StatType.CriticalHitChancePercent, 0.13m), 1 },
            { (StatType.CriticalHitChancePercent, 0.15m), 2 },
            { (StatType.CriticalHitChancePercent, 0.18m), 3 },
            { (StatType.CriticalHitChancePercent, 0.2m), 4 },
            { (StatType.CriticalHitChancePercent, 0.22m), 5 },
            { (StatType.CriticalHitChancePercent, 0.24m), 6 },
            { (StatType.CriticalHitChancePercent, 0.26m), 7 },
            { (StatType.CriticalHitChancePercent, 0.29m), 8 },
            { (StatType.CriticalHitChancePercent, 0.31m), 9 },
            { (StatType.CriticalHitChancePercent, 0.33m), 10 },
            { (StatType.CriticalHitChancePercent, 0.36m), 11 },
            { (StatType.CriticalHitChancePercent, 0.4m), 12 },
            { (StatType.CriticalHitChancePercent, 0.43m), 13 },
            { (StatType.CriticalHitChancePercent, 0.46m), 14 },
            { (StatType.CriticalHitChancePercent, 0.55m), 15 },
            { (StatType.CriticalHitChancePercent, 0.6m), 15 }, // Reforged, 88
            { (StatType.CriticalHitDamagePercent, 0.13m), 0 },
            { (StatType.CriticalHitDamagePercent, 0.16m), 1 },
            { (StatType.CriticalHitDamagePercent, 0.18m), 2 },
            { (StatType.CriticalHitDamagePercent, 0.21m), 3 },
            { (StatType.CriticalHitDamagePercent, 0.23m), 4 },
            { (StatType.CriticalHitDamagePercent, 0.26m), 5 },
            { (StatType.CriticalHitDamagePercent, 0.29m), 6 },
            { (StatType.CriticalHitDamagePercent, 0.31m), 7 },
            { (StatType.CriticalHitDamagePercent, 0.34m), 8 },
            { (StatType.CriticalHitDamagePercent, 0.36m), 9 },
            { (StatType.CriticalHitDamagePercent, 0.39m), 10 },
            { (StatType.CriticalHitDamagePercent, 0.43m), 11 },
            { (StatType.CriticalHitDamagePercent, 0.47m), 12 },
            { (StatType.CriticalHitDamagePercent, 0.51m), 13 },
            { (StatType.CriticalHitDamagePercent, 0.55m), 14 },
            { (StatType.CriticalHitDamagePercent, 0.65m), 15 },
            { (StatType.CriticalHitDamagePercent, 0.7m), 15 }, // Reforged, 88
        };
    // Using 3 stats at +0
    public static readonly Dictionary<int, (decimal Min, decimal Max)> EquipmentRank2GearScoreMinMax =
        new Dictionary<int, (decimal Min, decimal Max)>() {
            { 0, (18, 23) }, { 1, (18, 23) }, { 2, (18, 23) },
            { 3, (26, 30) }, { 4, (26, 30) }, { 5, (26, 30) },
            { 6, (34, 37) }, { 7, (34, 37) }, { 8, (34, 37) },
            { 9, (42, 44) }, { 10, (42, 44) }, { 11, (42, 44) },
            { 12, (50, 51) }, { 13, (50, 51) }, { 14, (50, 51) },
            { 15, (58, 58) },
        };
}